{
	"client-listing": {
		"prefix": "cnListing",
		"body": [
			"import React, { useCallback, useEffect, useState } from 'react'\r",
			"import { useDispatch, useSelector } from \"react-redux\"\r",
			"import useToast from \"../../../utilities/hooks/useToast\"\r",
			"import DataListing from \"../../../utilities/interface/datastack/data.listing\"\r",
			"import ${1:Service}Injoin from \"./${2:FileNameTag}.item.injoin\"\r",
			"import { show${1:Service}Injoiner } from \"./${2:FileNameTag}.item.reducer\"\r",
			"\r",
			"const ${1:Service}Listing = () => {\r",
			"    const dataSelector = useSelector(state => state.${1/(.*)/${1:/downcase}/})\r",
			"    const dispatch = useDispatch()\r",
			"    const [records, setrecords] = useState()\r",
			"    const toast = useToast()\r",
			"    const layout = dataSelector.listing.layout\r",
			"    const header = {\r",
			"        title: dataSelector.listing.title,\r",
			"        description: dataSelector.listing.description\r",
			"    }\r",
			"\r",
			"    const toggleEdit = (item) => {\r",
			"        dispatch(set${1:Service}Item(item))\r",
			"        dispatch(show${1:Service}Injoiner())\r",
			"    }\r",
			"\r",
			"    const toggleDelete = (item) => {\r",
			"        assignDeleteCallback({ item: item, callback: handleDelete })\r",
			"        dispatch(showDelete({ description: \"Purchase Order Item\", reference: item.product }))\r",
			"    }\r",
			"\r",
			"    const handleDelete = async (item) => {\r",
			"        if (!item.id) {\r",
			"            toast.showError(\"Reference id does not exist.\")\r",
			"            return\r",
			"        }\r",
			"        await delete${1:Service}({ id: item.id })\r",
			"            .unwrap()\r",
			"            .then(res => {\r",
			"                if (res.success) {\r",
			"                    dispatch(set${1:Service}Notifier(true))\r",
			"                }\r",
			"            })\r",
			"            .catch(err => console.error(err))\r",
			"        return true\r",
			"    }\r",
			"\r",
			"    const controls = (item) => {\r",
			"        return [\r",
			"            { label: 'Edit', trigger: () => toggleEdit(item) },\r",
			"            { label: 'Delete', trigger: () => toggleDelete(item) },\r",
			"        ]\r",
			"    }\r",
			"\r",
			"    const items = (item) => {\r",
			"        return [\r",
			"            { value: item.product },\r",
			"        ]\r",
			"    }\r",
			"\r",
			"    useEffect(() => {\r",
			"        if (dataSelector?.data) {\r",
			"            let data = dataSelector?.data\r",
			"            setrecords(data?.map((item, i) => {\r",
			"                return {\r",
			"                    key: item.id,\r",
			"                    items: items(item),\r",
			"                    controls: controls(item)\r",
			"                }\r",
			"            }))\r",
			"        }\r",
			"    }, [dataSelector?.data])\r",
			"\r",
			"    const appendList = useCallback(() => {\r",
			"        console.log(\"appending\")\r",
			"        dispatch(show${1:Service}Injoiner())\r",
			"    }, [])\r",
			"\r",
			"    const saveList = useCallback(() => {\r",
			"        console.log(\"saving...\")\r",
			"    }, [])\r",
			"\r",
			"    return (\r",
			"        <>\r",
			"            <DataListing\r",
			"                header={header}\r",
			"                layout={layout}\r",
			"                records={records}\r",
			"                appendcallback={appendList}\r",
			"                savecallback={saveList}\r",
			"            />\r",
			"            <${1:Service}Injoin />\r",
			"        </>\r",
			"    )\r",
			"}\r",
			"\r",
			"export default ${1:Service}Listing"
		],
		"description": ""
	}
}
{
	"client-index": {
		"prefix": "cnIndex",
		"body": [
			"import React, { useEffect } from 'react'\r",
			"import { useDispatch, useSelector } from \"react-redux\"\r",
			"import DataIndex from \"../../../utilities/interface/datastack/data.index\"\r",
			"import ${1/(.*)/${1:/capitalize}/}Manage from \"./${1:Module}.manage\"\r",
			"import ${1/(.*)/${1:/capitalize}/}Records from \"./${1:Module}.records\"\r",
			"import { reset${1/(.*)/${1:/capitalize}/}Item, set${1/(.*)/${1:/capitalize}/}Data, set${1/(.*)/${1:/capitalize}/}Notifier, show${1/(.*)/${1:/capitalize}/}Manager } from \"./${1:Module}.reducer\"\r",
			"import { useFetchAll${1/(.*)/${1:/capitalize}/}Mutation } from \"./${1:Module}.services\"\r",
			"\r",
			"const ${1/(.*)/${1:/capitalize}/}Index = () => {\r",
			"    const [all${1/(.*)/${1:/capitalize}/}, { isLoading, isError, isSuccess }] = useFetchAll${1/(.*)/${1:/capitalize}/}Mutation()\r",
			"    const dataSelector = useSelector(state => state.${1:Module})\r",
			"    const dispatch = useDispatch()\r",
			"\r",
			"    useEffect(() => {\r",
			"        const instantiate = async () => {\r",
			"            await all${1/(.*)/${1:/capitalize}/}()\r",
			"                .unwrap()\r",
			"                .then(res => {\r",
			"                    if (res.success) {\r",
			"                        dispatch(set${1/(.*)/${1:/capitalize}/}Data(res?.arrayResult))\r",
			"                        dispatch(set${1/(.*)/${1:/capitalize}/}Notifier(false))\r",
			"                    }\r",
			"                })\r",
			"                .catch(err => console.error(err))\r",
			"            return\r",
			"        }\r",
			"        if (dataSelector.data.length === 0 || dataSelector.notifier) {\r",
			"            instantiate()\r",
			"        }\r",
			"    }, [dataSelector.notifier])\r",
			"\r",
			"    useEffect(() => {\r",
			"        if (!isLoading && isSuccess) {\r",
			"            console.log(\"done\")\r",
			"        }\r",
			"    }, [isSuccess, isLoading])\r",
			"\r",
			"    const toggleNewEntry = () => {\r",
			"        dispatch(reset${1/(.*)/${1:/capitalize}/}Item())\r",
			"        dispatch(show${1/(.*)/${1:/capitalize}/}Manager())\r",
			"    }\r",
			"\r",
			"    const actions = () => {\r",
			"        return [\r",
			"            { label: `Add ${dataSelector.display.name}`, callback: toggleNewEntry },\r",
			"        ]\r",
			"    }\r",
			"\r",
			"    return (\r",
			"        (dataSelector.manager) ? (\r",
			"            <${1/(.*)/${1:/capitalize}/}Manage name={dataSelector.display.name} />\r",
			"        ) : (\r",
			"            <DataIndex\r",
			"                display={dataSelector.display}\r",
			"                actions={actions()}\r",
			"                data={dataSelector.data}\r",
			"                isError={isError}\r",
			"                isLoading={isLoading}\r",
			"            >\r",
			"                <${1/(.*)/${1:/capitalize}/}Records />\r",
			"            </DataIndex >\r",
			"        )\r",
			"    )\r",
			"}\r",
			"\r",
			"export default ${1/(.*)/${1:/capitalize}/}Index"
		],
		"description": ""
	}
}
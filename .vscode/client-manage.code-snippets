{
	"client-manage": {
		"prefix": "cnManage",
		"body": [
			"import { useEffect, useState } from \"react\"\r",
			"import { useDispatch, useSelector } from \"react-redux\"\r",
			"import { isEmpty } from \"../../../utilities/functions/string.functions\"\r",
			"import useToast from \"../../../utilities/hooks/useToast\"\r",
			"import useYup from \"../../../utilities/hooks/useYup\"\r",
			"import DataInputs from \"../../../utilities/interface/datastack/data.inputs\"\r",
			"import FormEl from \"../../../utilities/interface/forminput/input.active\"\r",
			"import ${1:Service}Reducer from \"./${1:Service}.reducer\"\r",
			"import { useCreate${1/(.*)/${1:/capitalize}/}Mutation, useUpdate${1/(.*)/${1:/capitalize}/}Mutation } from \"./${1:Service}.services\"\r",
			"\r",
			"const ${1/(.*)/${1:/capitalize}/}Manage = () => {\r",
			"    const { reset${1/(.*)/${1:/capitalize}/}Manager, set${1/(.*)/${1:/capitalize}/}Notifier } = ${1:Service}Reducer\r",
			"    const dataSelector = useSelector(state => state.${1:Service})\r",
			"    const dispatch = useDispatch()\r",
			"    const [instantiated, setInstantiated] = useState(false)\r",
			"    const [listener, setListener] = useState()\r",
			"    const [element, setElement] = useState()\r",
			"    const [values, setValues] = useState()\r",
			"    const { yup } = useYup()\r",
			"    const toast = useToast()\r",
			"\r",
			"    const [create${1/(.*)/${1:/capitalize}/}] = useCreate${1/(.*)/${1:/capitalize}/}Mutation()\r",
			"    const [update${1/(.*)/${1:/capitalize}/}] = useUpdate${1/(.*)/${1:/capitalize}/}Mutation()\r",
			"\r",
			"    useEffect(() => {\r",
			"        const instantiate = async () => {\r",
			"            // fetch all library dependencies here. (e.g. dropdown values, etc.)\r",
			"            setInstantiated(true)\r",
			"        }\r",
			"\r",
			"        instantiate()\r",
			"        return () => {\r",
			"            setInstantiated(false)\r",
			"        }\r",
			"    }, [])\r",
			"\r",
			"    const init = (value, initial = \"\") => {\r",
			"        if (!isEmpty(value)) {\r",
			"            return value\r",
			"        }\r",
			"        return initial\r",
			"    }\r",
			"\r",
			"    useEffect(() => {\r",
			"        if (instantiated) {\r",
			"            let item = dataSelector.item\r",
			"            setValues({\r",
			"                name: init(item.name),\r",
			"            })\r",
			"        }\r",
			"    }, [instantiated])\r",
			"\r",
			"    const onFields = (errors, register, values, setValue) => {\r",
			"        return (\r",
			"            <>\r",
			"                <FormEl.Text\r",
			"                    label='Name'\r",
			"                    register={register}\r",
			"                    name='name'\r",
			"                    errors={errors}\r",
			"                    autoComplete='off'\r",
			"                    wrapper='lg:w-1/2'\r",
			"                />\r",
			"            </>\r",
			"        )\r",
			"    }\r",
			"\r",
			"    const onChange = (values, element) => {\r",
			"        setListener(values)\r",
			"        setElement(element)\r",
			"    }\r",
			"\r",
			"    useEffect(() => {\r",
			"        if (listener) {\r",
			"            // console.info(`\\${element}`, listener[element])\r",
			"        }\r",
			"    }, [listener])\r",
			"\r",
			"    const onSchema = yup.object().shape({\r",
			"        name: yup\r",
			"            .string()\r",
			"            .required('Field is required.'),\r",
			"    })\r",
			"\r",
			"    const onClose = () => {\r",
			"        dispatch(reset${1/(.*)/${1:/capitalize}/}Manager())\r",
			"    }\r",
			"\r",
			"    const onCompleted = () => {\r",
			"        dispatch(set${1/(.*)/${1:/capitalize}/}Notifier(true))\r",
			"        dispatch(reset${1/(.*)/${1:/capitalize}/}Manager())\r",
			"    }\r",
			"\r",
			"    const onSubmit = async (data) => {\r",
			"        const formData = data\r",
			"        if (dataSelector.item.id) {\r",
			"            await update${1/(.*)/${1:/capitalize}/}({ ...data, id: dataSelector.item.id })\r",
			"                .unwrap()\r",
			"                .then(res => {\r",
			"                    if (res.success) {\r",
			"                        toast.showUpdate(\"${1/(.*)/${1:/capitalize}/} successfully updated.\")\r",
			"                        onCompleted()\r",
			"                    }\r",
			"                })\r",
			"                .catch(err => console.error(err))\r",
			"            return\r",
			"        }\r",
			"        await create${1/(.*)/${1:/capitalize}/}(data)\r",
			"            .unwrap()\r",
			"            .then(res => {\r",
			"                if (res.success) {\r",
			"                    toast.showCreate(\"${1/(.*)/${1:/capitalize}/} successfully created.\")\r",
			"                    onCompleted()\r",
			"                }\r",
			"            })\r",
			"            .catch(err => console.error(err))\r",
			"    }\r",
			"\r",
			"    const inputFormData = {\r",
			"        id: dataSelector.item.id,\r",
			"        name: dataSelector.display.name,\r",
			"        values: values,\r",
			"        schema: onSchema\r",
			"    }\r",
			"\r",
			"    return (\r",
			"        <DataInputs\r",
			"            formData={inputFormData}\r",
			"            fields={onFields}\r",
			"            change={onChange}\r",
			"            submit={onSubmit}\r",
			"            closed={onClose}\r",
			"        />\r",
			"    )\r",
			"}\r",
			"\r",
			"export default ${1/(.*)/${1:/capitalize}/}Manage"
		],
		"description": ""
	}
}
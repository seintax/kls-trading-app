{
	"server-query": {
		"prefix": "svQuery",
		"body": [
			"const handler = require(\"express-async-handler\")\r",
			"const { proceed, poolwrap, poolarray, poolalter, poolinject, poolremove, force } = require(\"../../utilities/callback.utility\")\r",
			"const helper = require('./${1:ModuleName}.helper')\r",
			"const { Param, Field } = require(\"../../utilities/builder.utility\")\r",
			"\r",
			"function p(object) {\r",
			"    return new Param(object.alias, object.param)\r",
			"}\r",
			"\r",
			"function f(object) {\r",
			"    return new Field(object.alias, object.value)\r",
			"}\r",
			"\r",
			"const _create = handler(async (req, res) => {\r",
			"    const builder = helper.insert(req.body)\r",
			"    await poolinject(builder, (err, ans) => {\r",
			"        if (err) return res.status(401).json(force(err))\r",
			"        res.status(200).json(proceed(ans, req))\r",
			"    })\r",
			"})\r",
			"\r",
			"const _update = handler(async (req, res) => {\r",
			"    const builder = helper.update(req.body)\r",
			"    await poolalter(builder, (err, ans) => {\r",
			"        if (err) return res.status(401).json(force(err))\r",
			"        res.status(200).json(proceed(ans, req))\r",
			"    })\r",
			"})\r",
			"\r",
			"const _delete = handler(async (req, res) => {\r",
			"    const builder = helper.delete(req.body)\r",
			"    await poolremove(builder, (err, ans) => {\r",
			"        if (err) return res.status(401).json(force(err))\r",
			"        res.status(200).json(proceed(ans, req))\r",
			"    })\r",
			"})\r",
			"\r",
			"const _record = handler(async (req, res) => {\r",
			"    const builder = helper.records()\r",
			"    await poolarray(builder, (err, ans) => {\r",
			"        if (err) return res.status(401).json(force(err))\r",
			"        res.status(200).json(proceed(ans, req))\r",
			"    })\r",
			"})\r",
			"\r",
			"const _search = handler(async (req, res) => {\r",
			"    const { search } = helper.parameters(req.query)\r",
			"    const { name, id } = helper.fields\r",
			"    let params = [p(search).Exactly()]\r",
			"    let clause = [f(name).IsEqual()]\r",
			"    let series = [f(id).Asc()]\r",
			"    let limits = undefined\r",
			"    const builder = helper.inquiry(clause, params, series, limits)\r",
			"    await poolarray(builder, (err, ans) => {\r",
			"        if (err) return res.status(401).json(force(err))\r",
			"        res.status(200).json(proceed(ans, req))\r",
			"    })\r",
			"})\r",
			"\r",
			"const _findone = handler(async (req, res) => {\r",
			"    const builder = helper.findone(req.query)\r",
			"    await poolwrap(builder, (err, ans) => {\r",
			"        if (err) return res.status(401).json(force(err))\r",
			"        res.status(200).json(proceed(ans, req))\r",
			"    })\r",
			"})\r",
			"\r",
			"const _specify = handler(async (req, res) => {\r",
			"    const builder = helper.specific(req.body)\r",
			"    await poolarray(builder, (err, ans) => {\r",
			"        if (err) return res.status(401).json(force(err))\r",
			"        res.status(200).json(proceed(ans, req))\r",
			"    })\r",
			"})\r",
			"\r",
			"module.exports = {\r",
			"    _create,\r",
			"    _record,\r",
			"    _update,\r",
			"    _delete,\r",
			"    _search,\r",
			"    _specify,\r",
			"    _findone,\r",
			"}"
		],
		"description": ""
	}
}
{
	"client-records": {
		"prefix": "cnRecords",
		"body": [
			"import React, { useEffect, useState } from 'react'\r",
			"import { useDispatch, useSelector } from \"react-redux\"\r",
			"import { useModalContext } from \"../../../utilities/context/modal.context\"\r",
			"import { sortBy } from '../../../utilities/functions/array.functions'\r",
			"import useToast from \"../../../utilities/hooks/useToast\"\r",
			"import DataOperation from '../../../utilities/interface/datastack/data.operation'\r",
			"import DataRecords from '../../../utilities/interface/datastack/data.records'\r",
			"import { showDelete } from \"../../../utilities/redux/slices/deleteSlice\"\r",
			"import { set${1/(.*)/${1:/capitalize}/}Item, set${1/(.*)/${1:/capitalize}/}Notifier, show${1/(.*)/${1:/capitalize}/}Manager } from \"./${1:Module}.reducer\"\r",
			"import { useDelete${1/(.*)/${1:/capitalize}/}Mutation } from \"./${1:Module}.services\"\r",
			"\r",
			"const ${1/(.*)/${1:/capitalize}/}Records = () => {\r",
			"    const dataSelector = useSelector(state => state.${1:Module})\r",
			"    const { assignDeleteCallback } = useModalContext()\r",
			"    const dispatch = useDispatch()\r",
			"    const [records, setrecords] = useState()\r",
			"    const [startpage, setstartpage] = useState(1)\r",
			"    const [sorted, setsorted] = useState()\r",
			"    const columns = dataSelector.header\r",
			"    const toast = useToast()\r",
			"\r",
			"    const [delete${1/(.*)/${1:/capitalize}/}] = useDelete${1/(.*)/${1:/capitalize}/}Mutation()\r",
			"\r",
			"    const toggleEdit = (item) => {\r",
			"        dispatch(set${1/(.*)/${1:/capitalize}/}Item(item))\r",
			"        dispatch(show${1/(.*)/${1:/capitalize}/}Manager())\r",
			"    }\r",
			"\r",
			"    const toggleDelete = (item) => {\r",
			"        assignDeleteCallback({ item: item, callback: handleDelete })\r",
			"        dispatch(showDelete({ description: \"Email address\", reference: item.name }))\r",
			"    }\r",
			"\r",
			"    const handleDelete = async (item) => {\r",
			"        if (!item.id) {\r",
			"            toast.showError(\"Reference id does not exist.\")\r",
			"            return\r",
			"        }\r",
			"        await delete${1/(.*)/${1:/capitalize}/}({ id: item.id })\r",
			"            .unwrap()\r",
			"            .then(res => {\r",
			"                if (res.success) {\r",
			"                    dispatch(set${1/(.*)/${1:/capitalize}/}Notifier(true))\r",
			"                }\r",
			"            })\r",
			"            .catch(err => console.error(err))\r",
			"        return true\r",
			"    }\r",
			"\r",
			"    const actions = (item) => {\r",
			"        return [\r",
			"            { type: 'button', trigger: () => toggleEdit(item), label: 'Edit' },\r",
			"            { type: 'button', trigger: () => toggleDelete(item), label: 'Delete' }\r",
			"        ]\r",
			"    }\r",
			"\r",
			"    const items = (item) => {\r",
			"        return [\r",
			"            { value: item.${2:FieldName} },\r",
			"            { value: <DataOperation actions={actions(item)} /> }\r",
			"        ]\r",
			"    }\r",
			"\r",
			"    useEffect(() => {\r",
			"        if (dataSelector?.data) {\r",
			"            let data = sorted ? sortBy(dataSelector?.data, sorted) : dataSelector?.data\r",
			"            setrecords(data?.map((item, i) => {\r",
			"                return {\r",
			"                    key: item.id,\r",
			"                    items: items(item),\r",
			"                    ondoubleclick: () => { },\r",
			"                }\r",
			"            }))\r",
			"        }\r",
			"    }, [dataSelector?.data, sorted])\r",
			"\r",
			"    return (\r",
			"        <>\r",
			"            <DataRecords\r",
			"                page={startpage}\r",
			"                columns={columns}\r",
			"                records={records}\r",
			"                setsorted={setsorted}\r",
			"                setPage={setstartpage}\r",
			"                itemsperpage={dataSelector?.perpage}\r",
			"            />\r",
			"        </>\r",
			"    )\r",
			"}\r",
			"export default ${1/(.*)/${1:/capitalize}/}Records"
		],
		"description": ""
	}
}